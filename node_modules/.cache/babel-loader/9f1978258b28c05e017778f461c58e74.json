{"ast":null,"code":"var _jsxFileName = \"E:\\\\Git\\\\2019-Dev\\\\tictactoe-react\\\\src\\\\components\\\\board\\\\Board.js\";\nimport React, { Component } from 'react';\nimport Square from '../square/Square';\nimport './Board.css';\n\nclass Board extends Component {\n  constructor() {\n    super();\n    this.XPLAYER_TURN = 'Player X\\'s Turn!';\n    this.OPLAYER_TURN = 'Player O\\'s Turn!';\n    this.XPLAYER_WINS = 'Player X Wins!';\n    this.OPLAYER_WINS = 'Player O Wins!';\n    this.DRAW = 'It\\'s a Draw!';\n    this.statusMessages = {\n      \"turn\": {\n        \"X\": this.XPLAYER_TURN,\n        \"O\": this.OPLAYER_TURN\n      },\n      \"won\": {\n        \"X\": this.XPLAYER_WINS,\n        \"O\": this.OPLAYER_WINS\n      }\n    };\n    this.state = {\n      isGameOver: false,\n      gameStatusMessage: this.XPLAYER_TURN,\n      squareEnum: {\n        EMPTY: '',\n        xPlayer: 'X',\n        oPlayer: 'O'\n      },\n      currentPlayer: 'X',\n      board: ['', '', '', '', '', '', '', '', ''],\n      squareIndex: null\n    };\n  }\n\n  updateBoard(squareIndex) {\n    if (this.isMoveAllowed(squareIndex)) {\n      this.setSquareItem(squareIndex);\n      this.checkGameStatus();\n    }\n  }\n\n  isMoveAllowed(squareIndex) {\n    return !this.state.isGameOver && this.isEmptyPosition(squareIndex);\n  }\n\n  isEmptyPosition(squareIndex) {\n    return this.state.board[squareIndex] === this.state.squareEnum.EMPTY;\n  }\n\n  setSquareItem(squareIndex) {\n    let updatedBoard = this.state.board;\n    updatedBoard[squareIndex] = this.state.currentPlayer;\n    this.setState({\n      board: updatedBoard\n    });\n  }\n\n  checkGameStatus() {\n    if (this.isWon()) {\n      this.setGameStatus(true, this.getStatusMessage('won', this.state.currentPlayer));\n    } else if (this.isDraw()) {\n      this.setGameStatus(true, this.DRAW);\n    } else {\n      this.nextMove();\n    }\n  }\n\n  isWon() {\n    return this.isTriplet();\n  }\n\n  isDraw() {\n    return this.isBoardFull() && !this.isTriplet();\n  }\n\n  nextMove() {\n    this.togglePlayer();\n  }\n\n  isTriplet() {\n    let tempBoard = this.tempBoard(this.state.board);\n    return this.isHorizontalTriplet(tempBoard) || this.isVerticalTriplet(tempBoard) || this.isDiagonalTriplet(tempBoard);\n  }\n\n  isBoardFull() {\n    for (const squareItem of this.state.board) {\n      if (squareItem === this.state.squareEnum.EMPTY) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isHorizontalTriplet(tempBoard) {\n    for (const colArray of tempBoard) {\n      if (this.isEqual(colArray[0], colArray[1], colArray[2])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isVerticalTriplet(tempBoard) {\n    let rowIndex = 0;\n\n    for (let colIndex = 0; colIndex < tempBoard[rowIndex].length; colIndex++) {\n      if (this.isEqual(tempBoard[0][colIndex], tempBoard[1][colIndex], tempBoard[2][colIndex])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isDiagonalTriplet(tempBoard) {\n    return this.isLeftDiagonalTriplet(tempBoard) || this.isRightDiagonalTriplet(tempBoard);\n  }\n\n  isLeftDiagonalTriplet(tempBoard) {\n    return this.isEqual(tempBoard[0][0], tempBoard[1][1], tempBoard[2][2]);\n  }\n\n  isRightDiagonalTriplet(tempBoard) {\n    return this.isEqual(tempBoard[0][2], tempBoard[1][1], tempBoard[2][0]);\n  }\n\n  isEqual(squareItem1, squareItem2, squareItem3) {\n    return squareItem1 !== '' && squareItem1 === squareItem2 && squareItem2 === squareItem3;\n  }\n\n  tempBoard(board) {\n    return [board.slice(0, 3), board.slice(3, 6), board.slice(6, 9)];\n  }\n\n  togglePlayer() {\n    let updatedCurrentPlayer = this.state.currentPlayer === this.state.squareEnum.xPlayer ? this.state.squareEnum.oPlayer : this.state.squareEnum.xPlayer;\n    this.setState({\n      currentPlayer: updatedCurrentPlayer\n    });\n    this.setGameStatus(false, this.getStatusMessage('turn', updatedCurrentPlayer));\n  }\n\n  setGameStatus(isGameOver, gameStatusMessage) {\n    this.setState({\n      isGameOver: isGameOver,\n      gameStatusMessage: gameStatusMessage\n    });\n  }\n\n  getStatusMessage(status, player) {\n    const _this$statusMessages = this.statusMessages,\n          turn = _this$statusMessages.turn,\n          won = _this$statusMessages.won;\n\n    switch (player.concat(status)) {\n      case 'Xturn':\n        return turn.X;\n\n      case 'Oturn':\n        return turn.O;\n\n      case 'Xwon':\n        return won.X;\n\n      case 'Owon':\n        return won.O;\n\n      default:\n        return this.state.gameStatusMessage;\n    }\n  }\n\n  render() {\n    return this.createBoard();\n  }\n\n  createBoard() {\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gameStatusMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.state.gameStatusMessage), this.state.board.map(function (squareItem, squareIndex) {\n      return React.createElement(Square, {\n        key: squareIndex,\n        squareIndex: squareIndex,\n        squareItem: squareItem,\n        updateSquare: this.updateBoard.bind(this),\n        currentPlayer: this.state.currentPlayer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      });\n    }.bind(this)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["E:\\Git\\2019-Dev\\tictactoe-react\\src\\components\\board\\Board.js"],"names":["React","Component","Square","Board","constructor","XPLAYER_TURN","OPLAYER_TURN","XPLAYER_WINS","OPLAYER_WINS","DRAW","statusMessages","state","isGameOver","gameStatusMessage","squareEnum","EMPTY","xPlayer","oPlayer","currentPlayer","board","squareIndex","updateBoard","isMoveAllowed","setSquareItem","checkGameStatus","isEmptyPosition","updatedBoard","setState","isWon","setGameStatus","getStatusMessage","isDraw","nextMove","isTriplet","isBoardFull","togglePlayer","tempBoard","isHorizontalTriplet","isVerticalTriplet","isDiagonalTriplet","squareItem","colArray","isEqual","rowIndex","colIndex","length","isLeftDiagonalTriplet","isRightDiagonalTriplet","squareItem1","squareItem2","squareItem3","slice","updatedCurrentPlayer","status","player","turn","won","concat","X","O","render","createBoard","map","bind"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAa5BG,EAAAA,WAAW,GAAI;AACb;AADa,SAXfC,YAWe,GAXA,mBAWA;AAAA,SAVfC,YAUe,GAVA,mBAUA;AAAA,SATfC,YASe,GATA,gBASA;AAAA,SARfC,YAQe,GARA,gBAQA;AAAA,SAPfC,IAOe,GAPR,eAOQ;AAAA,SALfC,cAKe,GALE;AACf,cAAQ;AAAE,aAAK,KAAKL,YAAZ;AAA0B,aAAK,KAAKC;AAApC,OADO;AAEf,aAAQ;AAAE,aAAK,KAAKC,YAAZ;AAA0B,aAAK,KAAKC;AAApC;AAFO,KAKF;AAGb,SAAKG,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAG,KADF;AAEXC,MAAAA,iBAAiB,EAAG,KAAKR,YAFd;AAGXS,MAAAA,UAAU,EAAG;AAACC,QAAAA,KAAK,EAAG,EAAT;AAAaC,QAAAA,OAAO,EAAG,GAAvB;AAA4BC,QAAAA,OAAO,EAAG;AAAtC,OAHF;AAIXC,MAAAA,aAAa,EAAG,GAJL;AAKXC,MAAAA,KAAK,EAAG,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,CALG;AAMXC,MAAAA,WAAW,EAAG;AANH,KAAb;AAQD;;AAEDC,EAAAA,WAAW,CAACD,WAAD,EAAc;AACvB,QAAI,KAAKE,aAAL,CAAmBF,WAAnB,CAAJ,EAAqC;AACnC,WAAKG,aAAL,CAAmBH,WAAnB;AACA,WAAKI,eAAL;AACD;AACF;;AAEDF,EAAAA,aAAa,CAACF,WAAD,EAAc;AACzB,WAAQ,CAAC,KAAKT,KAAL,CAAWC,UAAZ,IAA0B,KAAKa,eAAL,CAAqBL,WAArB,CAAlC;AACD;;AAEDK,EAAAA,eAAe,CAAEL,WAAF,EAAe;AAC5B,WAAQ,KAAKT,KAAL,CAAWQ,KAAX,CAAiBC,WAAjB,MAAkC,KAAKT,KAAL,CAAWG,UAAX,CAAsBC,KAAhE;AACD;;AAEDQ,EAAAA,aAAa,CAACH,WAAD,EAAc;AACzB,QAAIM,YAAY,GAAG,KAAKf,KAAL,CAAWQ,KAA9B;AACAO,IAAAA,YAAY,CAACN,WAAD,CAAZ,GAA4B,KAAKT,KAAL,CAAWO,aAAvC;AACA,SAAKS,QAAL,CAAc;AACZR,MAAAA,KAAK,EAAGO;AADI,KAAd;AAGD;;AAEDF,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAKI,KAAL,EAAJ,EAAkB;AAChB,WAAKC,aAAL,CAAmB,IAAnB,EAAyB,KAAKC,gBAAL,CAAsB,KAAtB,EAA6B,KAAKnB,KAAL,CAAWO,aAAxC,CAAzB;AACD,KAFD,MAGK,IAAI,KAAKa,MAAL,EAAJ,EAAmB;AACtB,WAAKF,aAAL,CAAmB,IAAnB,EAAyB,KAAKpB,IAA9B;AACD,KAFI,MAGA;AACH,WAAKuB,QAAL;AACD;AACF;;AAEDJ,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKK,SAAL,EAAP;AACD;;AAEDF,EAAAA,MAAM,GAAG;AACP,WAAQ,KAAKG,WAAL,MAAsB,CAAC,KAAKD,SAAL,EAA/B;AACD;;AAEDD,EAAAA,QAAQ,GAAG;AACT,SAAKG,YAAL;AACD;;AAEDF,EAAAA,SAAS,GAAG;AACV,QAAIG,SAAS,GAAG,KAAKA,SAAL,CAAe,KAAKzB,KAAL,CAAWQ,KAA1B,CAAhB;AACA,WAAQ,KAAKkB,mBAAL,CAAyBD,SAAzB,KAAuC,KAAKE,iBAAL,CAAuBF,SAAvB,CAAvC,IAA4E,KAAKG,iBAAL,CAAuBH,SAAvB,CAApF;AACD;;AAEDF,EAAAA,WAAW,GAAG;AACZ,SAAK,MAAMM,UAAX,IAAyB,KAAK7B,KAAL,CAAWQ,KAApC,EAA0C;AACxC,UAAIqB,UAAU,KAAK,KAAK7B,KAAL,CAAWG,UAAX,CAAsBC,KAAzC,EAA+C;AAC7C,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAEDsB,EAAAA,mBAAmB,CAACD,SAAD,EAAY;AAC7B,SAAK,MAAMK,QAAX,IAAuBL,SAAvB,EAAkC;AAChC,UAAI,KAAKM,OAAL,CAAaD,QAAQ,CAAC,CAAD,CAArB,EAA0BA,QAAQ,CAAC,CAAD,CAAlC,EAAuCA,QAAQ,CAAC,CAAD,CAA/C,CAAJ,EAAyD;AACvD,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAEDH,EAAAA,iBAAiB,CAACF,SAAD,EAAY;AAC3B,QAAIO,QAAQ,GAAG,CAAf;;AACA,SAAK,IAAIC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGR,SAAS,CAACO,QAAD,CAAT,CAAoBE,MAAtD,EAA8DD,QAAQ,EAAtE,EAA0E;AACxE,UAAI,KAAKF,OAAL,CAAaN,SAAS,CAAC,CAAD,CAAT,CAAaQ,QAAb,CAAb,EAAqCR,SAAS,CAAC,CAAD,CAAT,CAAaQ,QAAb,CAArC,EAA6DR,SAAS,CAAC,CAAD,CAAT,CAAaQ,QAAb,CAA7D,CAAJ,EAA0F;AACxF,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAEDL,EAAAA,iBAAiB,CAACH,SAAD,EAAY;AAC3B,WAAQ,KAAKU,qBAAL,CAA2BV,SAA3B,KAAyC,KAAKW,sBAAL,CAA4BX,SAA5B,CAAjD;AACD;;AAEDU,EAAAA,qBAAqB,CAACV,SAAD,EAAY;AAC/B,WAAO,KAAKM,OAAL,CAAaN,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAb,EAA8BA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAA9B,EAA+CA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAA/C,CAAP;AACD;;AAEDW,EAAAA,sBAAsB,CAACX,SAAD,EAAY;AAChC,WAAO,KAAKM,OAAL,CAAaN,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAb,EAA8BA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAA9B,EAA+CA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAA/C,CAAP;AACD;;AAEDM,EAAAA,OAAO,CAACM,WAAD,EAAcC,WAAd,EAA2BC,WAA3B,EAAwC;AAC7C,WAAQF,WAAW,KAAG,EAAd,IAAoBA,WAAW,KAAKC,WAApC,IAAmDA,WAAW,KAAKC,WAA3E;AACD;;AAEDd,EAAAA,SAAS,CAACjB,KAAD,EAAQ;AACf,WAAQ,CAACA,KAAK,CAACgC,KAAN,CAAY,CAAZ,EAAc,CAAd,CAAD,EAAmBhC,KAAK,CAACgC,KAAN,CAAY,CAAZ,EAAc,CAAd,CAAnB,EAAqChC,KAAK,CAACgC,KAAN,CAAY,CAAZ,EAAc,CAAd,CAArC,CAAR;AACD;;AAEDhB,EAAAA,YAAY,GAAG;AACb,QAAIiB,oBAAoB,GAAG,KAAKzC,KAAL,CAAWO,aAAX,KAA6B,KAAKP,KAAL,CAAWG,UAAX,CAAsBE,OAAnD,GAA6D,KAAKL,KAAL,CAAWG,UAAX,CAAsBG,OAAnF,GAA6F,KAAKN,KAAL,CAAWG,UAAX,CAAsBE,OAA9I;AACA,SAAKW,QAAL,CAAc;AACZT,MAAAA,aAAa,EAAGkC;AADJ,KAAd;AAGA,SAAKvB,aAAL,CAAmB,KAAnB,EAA0B,KAAKC,gBAAL,CAAsB,MAAtB,EAA8BsB,oBAA9B,CAA1B;AACD;;AAEDvB,EAAAA,aAAa,CAACjB,UAAD,EAAaC,iBAAb,EAAgC;AAC3C,SAAKc,QAAL,CAAc;AACZf,MAAAA,UAAU,EAAGA,UADD;AAEZC,MAAAA,iBAAiB,EAAGA;AAFR,KAAd;AAID;;AAEDiB,EAAAA,gBAAgB,CAACuB,MAAD,EAASC,MAAT,EAAiB;AAAA,iCACX,KAAK5C,cADM;AAAA,UACxB6C,IADwB,wBACxBA,IADwB;AAAA,UAClBC,GADkB,wBAClBA,GADkB;;AAE/B,YAAOF,MAAM,CAACG,MAAP,CAAcJ,MAAd,CAAP;AACE,WAAK,OAAL;AAAc,eAAOE,IAAI,CAACG,CAAZ;;AACd,WAAK,OAAL;AAAc,eAAOH,IAAI,CAACI,CAAZ;;AACd,WAAK,MAAL;AAAa,eAAOH,GAAG,CAACE,CAAX;;AACb,WAAK,MAAL;AAAa,eAAOF,GAAG,CAACG,CAAX;;AACb;AAAS,eAAO,KAAKhD,KAAL,CAAWE,iBAAlB;AALX;AAOD;;AAED+C,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKC,WAAL,EAAP;AACD;;AAEDA,EAAAA,WAAW,GAAG;AACZ,WACA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKlD,KAAL,CAAWE,iBAA/C,CADF,EAEG,KAAKF,KAAL,CAAWQ,KAAX,CAAiB2C,GAAjB,CAAqB,UAAUtB,UAAV,EAAsBpB,WAAtB,EAAmC;AACvD,aAAQ,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,WAAb;AAA0B,QAAA,WAAW,EAAEA,WAAvC;AAAoD,QAAA,UAAU,EAAEoB,UAAhE;AAA4E,QAAA,YAAY,EAAE,KAAKnB,WAAL,CAAiB0C,IAAjB,CAAsB,IAAtB,CAA1F;AAAuH,QAAA,aAAa,EAAE,KAAKpD,KAAL,CAAWO,aAAjJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACD,KAFqB,CAEpB6C,IAFoB,CAEf,IAFe,CAArB,CAFH,CADA;AAQD;;AArK2B;;AAwK9B,eAAe5D,KAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Square from '../square/Square';\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n\r\n  XPLAYER_TURN = 'Player X\\'s Turn!';\r\n  OPLAYER_TURN = 'Player O\\'s Turn!';\r\n  XPLAYER_WINS = 'Player X Wins!';\r\n  OPLAYER_WINS = 'Player O Wins!';\r\n  DRAW = 'It\\'s a Draw!';\r\n\r\n  statusMessages = {\r\n    \"turn\": { \"X\": this.XPLAYER_TURN, \"O\": this.OPLAYER_TURN},\r\n    \"won\":  { \"X\": this.XPLAYER_WINS, \"O\": this.OPLAYER_WINS},\r\n  }\r\n\r\n  constructor () {\r\n    super()\r\n\r\n    this.state = {\r\n      isGameOver : false,\r\n      gameStatusMessage : this.XPLAYER_TURN,\r\n      squareEnum : {EMPTY : '', xPlayer : 'X', oPlayer : 'O'},\r\n      currentPlayer : 'X',\r\n      board : ['','','','','','','','',''],\r\n      squareIndex : null\r\n    }\r\n  }\r\n \r\n  updateBoard(squareIndex) {\r\n    if (this.isMoveAllowed(squareIndex)) {\r\n      this.setSquareItem(squareIndex);\r\n      this.checkGameStatus();\r\n    }\r\n  }\r\n\r\n  isMoveAllowed(squareIndex) {\r\n    return (!this.state.isGameOver && this.isEmptyPosition(squareIndex));\r\n  }\r\n\r\n  isEmptyPosition (squareIndex) {\r\n    return (this.state.board[squareIndex] === this.state.squareEnum.EMPTY);\r\n  }\r\n\r\n  setSquareItem(squareIndex) {\r\n    let updatedBoard = this.state.board;\r\n    updatedBoard[squareIndex] = this.state.currentPlayer;\r\n    this.setState({\r\n      board : updatedBoard\r\n    })\r\n  }\r\n\r\n  checkGameStatus() {\r\n    if (this.isWon()) {\r\n      this.setGameStatus(true, this.getStatusMessage('won', this.state.currentPlayer));\r\n    }\r\n    else if (this.isDraw()) {\r\n      this.setGameStatus(true, this.DRAW);\r\n    }\r\n    else {\r\n      this.nextMove();\r\n    }\r\n  }\r\n\r\n  isWon() {\r\n    return this.isTriplet();\r\n  }\r\n\r\n  isDraw() {\r\n    return (this.isBoardFull() && !this.isTriplet());\r\n  }\r\n\r\n  nextMove() {\r\n    this.togglePlayer();\r\n  }\r\n\r\n  isTriplet() {\r\n    let tempBoard = this.tempBoard(this.state.board);\r\n    return (this.isHorizontalTriplet(tempBoard) || this.isVerticalTriplet(tempBoard) || this.isDiagonalTriplet(tempBoard));\r\n  }\r\n\r\n  isBoardFull() {\r\n    for (const squareItem of this.state.board){\r\n      if (squareItem === this.state.squareEnum.EMPTY){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isHorizontalTriplet(tempBoard) {\r\n    for (const colArray of tempBoard) {\r\n      if (this.isEqual(colArray[0], colArray[1], colArray[2])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isVerticalTriplet(tempBoard) {\r\n    let rowIndex = 0;\r\n    for (let colIndex = 0; colIndex < tempBoard[rowIndex].length; colIndex++) {\r\n      if (this.isEqual(tempBoard[0][colIndex], tempBoard[1][colIndex], tempBoard[2][colIndex])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isDiagonalTriplet(tempBoard) {\r\n    return (this.isLeftDiagonalTriplet(tempBoard) || this.isRightDiagonalTriplet(tempBoard));\r\n  }\r\n\r\n  isLeftDiagonalTriplet(tempBoard) {\r\n    return this.isEqual(tempBoard[0][0], tempBoard[1][1], tempBoard[2][2]);\r\n  }\r\n\r\n  isRightDiagonalTriplet(tempBoard) {\r\n    return this.isEqual(tempBoard[0][2], tempBoard[1][1], tempBoard[2][0]);\r\n  }\r\n\r\n  isEqual(squareItem1, squareItem2, squareItem3) {\r\n    return (squareItem1!=='' && squareItem1 === squareItem2 && squareItem2 === squareItem3);\r\n  }\r\n\r\n  tempBoard(board) {\r\n    return ([board.slice(0,3), board.slice(3,6), board.slice(6,9)]);\r\n  }\r\n\r\n  togglePlayer() {\r\n    let updatedCurrentPlayer = this.state.currentPlayer === this.state.squareEnum.xPlayer ? this.state.squareEnum.oPlayer : this.state.squareEnum.xPlayer;\r\n    this.setState({\r\n      currentPlayer : updatedCurrentPlayer\r\n    }) \r\n    this.setGameStatus(false, this.getStatusMessage('turn', updatedCurrentPlayer));\r\n  }\r\n\r\n  setGameStatus(isGameOver, gameStatusMessage) {\r\n    this.setState({\r\n      isGameOver : isGameOver,\r\n      gameStatusMessage : gameStatusMessage\r\n    })\r\n  }\r\n\r\n  getStatusMessage(status, player) {\r\n    const {turn, won} = this.statusMessages;\r\n    switch(player.concat(status)) {\r\n      case 'Xturn': return turn.X;\r\n      case 'Oturn': return turn.O;\r\n      case 'Xwon': return won.X;\r\n      case 'Owon': return won.O;\r\n      default: return this.state.gameStatusMessage;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.createBoard();\r\n  }\r\n\r\n  createBoard() {\r\n    return (\r\n    <div className=\"board\">\r\n      <div className=\"gameStatusMessage\">{this.state.gameStatusMessage}</div>\r\n      {this.state.board.map(function (squareItem, squareIndex) {\r\n        return (<Square key={squareIndex} squareIndex={squareIndex} squareItem={squareItem} updateSquare={this.updateBoard.bind(this)} currentPlayer={this.state.currentPlayer} />);\r\n      }.bind(this))}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}